#!/usr/bin/python3

# Copyright (c) 2020 Interri Kft.
# This file is an unpublished work. All rights reserved.

import sys
from jinja2 import Environment, FileSystemLoader

if len(sys.argv) != 2:
  print("Usage: ./generate_fbb outputdir", file=sys.stderr)
  exit(1)
outdir = sys.argv[1]

env = Environment(loader=FileSystemLoader('.'),
                  line_statement_prefix='###',
                  trim_blocks=True,
                  lstrip_blocks=True,
                  keep_trailing_newline=True)

# Symbolic constants to reduce the chance of typos
REQUIRED = "required"
OPTIONAL = "optional"
STRING = "string"
STRINGARRAY = "stringarray"

################################################################################

def gen_fbb(msgs):
  for (msg, fields) in msgs:
    for (req, type, var) in fields:
      if req not in [REQUIRED, OPTIONAL]:
        print("Unknown value instead of REQUIRED or OPTIONAL", file=sys.stderr)
        exit(1)
      if type == STRINGARRAY and req != OPTIONAL:
        print("STRINGARRAY must be OPTIONAL", file=sys.stderr)
        exit(1)

  for extension in ["c", "h"]:
    template = env.get_template("tpl." + extension)
    rendered = template.render(msgs=msgs,
                               REQUIRED=REQUIRED,
                               OPTIONAL=OPTIONAL,
                               STRING=STRING,
                               STRINGARRAY=STRINGARRAY)
    if rendered:
      with open(outdir + "/fbb." + extension, "w") as f:
        f.write(rendered)

################################################################################

gen_fbb([
  # This is used by fbb_test.c.
  ("testing", [
    (REQUIRED, "int", "ri1"),
    (OPTIONAL, "int", "oi2"),
    (REQUIRED, "int", "ri3"),
    (OPTIONAL, "int", "oi4"),
    (REQUIRED, STRING, "rs5"),
    (OPTIONAL, STRING, "os6"),
    (REQUIRED, STRING, "rs7"),
    (OPTIONAL, STRING, "os8"),
    (OPTIONAL, STRINGARRAY, "sa9"),
    (OPTIONAL, STRINGARRAY, "sa10"),
  ]),

  # interceptor library queries FireBuild supervisor if it can shortcut execution of the process
  ("scproc_query", [
    # process id
    (OPTIONAL, "pid_t", "pid"),
    # parent pid
    (OPTIONAL, "pid_t", "ppid"),
    # working dir process started in
    (OPTIONAL, STRING, "cwd"),
    # only argv, sending argc would be redundant
    (OPTIONAL, STRINGARRAY, "arg"),
    # environment variables in unprocessed NAME=value form
    (OPTIONAL, STRINGARRAY, "env_var"),
    # full path of the binary
    (OPTIONAL, STRING, "executable"),
    # loaded shared libraries in the beginning
    (OPTIONAL, STRINGARRAY, "libs"),
  ]),

  # FireBuild supervisor's response with details of shortcutting.
  # Unlike the others, this message type is used in the supervisor->interceptor direction of the
  # communication. Nevertheless, it resides in the same namespace.
  ("scproc_resp", [
    (REQUIRED, "bool", "shortcut"),
    (OPTIONAL, "int", "exit_status"),
    # makes sense only for shortcut = false
    (OPTIONAL, "int32_t", "debug_flags"),
  ]),

  # Those function calls are not handled specially in interceptor lib and
  # are reported once per process to supervisor
  ("gen_call", [
    # function name
    (REQUIRED, STRING, "call"),
  ]),

  # FireBuild error
  ("fb_error", [
    # error message
    (REQUIRED, STRING, "msg"),
  ]),
  # FireBuild debugging message
  ("fb_debug", [
    # error message
    (REQUIRED, STRING, "msg"),
  ]),

  ("fcntl", [
    # file descriptor
    (OPTIONAL, "int", "fd"),
    # command
    (OPTIONAL, "int", "cmd"),
    # arg, if present
    (OPTIONAL, "int", "arg"),
    # return value, depends on cmd
    (OPTIONAL, "int", "ret"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("ioctl", [
    # file descriptor
    (OPTIONAL, "int", "fd"),
    # command
    (OPTIONAL, "unsigned long", "cmd"),
    # return value, depends on cmd
    (OPTIONAL, "int", "ret"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("open", [
    # dir file descriptor for openat()
    (OPTIONAL, "int", "dirfd"),
    # file path
    (OPTIONAL, STRING, "file"),
    # flags, decoding is left for FireBuild supervisor
    (REQUIRED, "int", "flags"),
    # mode if (flags & O_CREAT), decoding is left for FireBuild supervisor
    (OPTIONAL, "mode_t", "mode"),
    # return value, the file descriptor if != -1
    (OPTIONAL, "int", "ret"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("freopen", [
    # file path
    (OPTIONAL, STRING, "filename"),
    # flags, decoding is left for FireBuild supervisor
    (OPTIONAL, "int", "flags"),
    # file descriptor associated to the stream to be reopened
    (OPTIONAL, "int", "fd"),
    # return value, the file descriptor if != -1
    (OPTIONAL, "int", "ret"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("chdir", [
    # directory path
    (OPTIONAL, STRING, "dir"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("fchdir", [
    # directory fd
    (OPTIONAL, "int", "fd"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("readlink", [
    # dir file descriptor for readlinkat()
    (OPTIONAL, "int", "dirfd"),
    # path name
    (OPTIONAL, STRING, "path"),
    # buffer size
    (OPTIONAL, "size_t", "bufsiz"),
    # returned path
    (OPTIONAL, STRING, "ret_path"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("rename", [
    # old dir file descriptor for renameat[2]()
    (OPTIONAL, "int", "oldfd"),
    # path to old file
    (OPTIONAL, STRING, "oldpath"),
    # new dir file descriptor for renameat[2]()
    (OPTIONAL, "int", "newfd"),
    # path to new file
    (OPTIONAL, STRING, "newpath"),
    # flags for renmaeat2()
    (OPTIONAL, "unsigned int", "flags"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("access", [
    # path to file
    (OPTIONAL, STRING, "pathname"),
    # acess mode
    (OPTIONAL, "int", "mode"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("euidaccess", [
    # path to file
    (OPTIONAL, STRING, "pathname"),
    # access mode
    (OPTIONAL, "int", "mode"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("faccessat", [
    # dir file descriptor
    (OPTIONAL, "int", "dirfd"),
    # path to file
    (OPTIONAL, STRING, "pathname"),
    # access mode
    (OPTIONAL, "int", "mode"),
    # flags
    (OPTIONAL, "int", "flags"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("stat", [
    # dir file descriptor for fstatat()
    (OPTIONAL, "int", "dirfd"),
    # path to file
    (OPTIONAL, STRING, "filename"),
    # it was actually lstat() or fstatat(..., AT_SYMLINK_NOFOLLOW), so don't follow symlink
    (OPTIONAL, "bool", "link"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("fstat", [
    # file fd
    (OPTIONAL, "int", "fd"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("rmdir", [
    # dir path
    (OPTIONAL, STRING, "dir"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("close", [
    # file descriptor
    (OPTIONAL, "int", "fd"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("fcloseall", [
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("chmod", [
    # dir file descriptor for fchmodat()
    (OPTIONAL, "int", "dirfd"),
    # file path
    (OPTIONAL, STRING, "path"),
    # mode
    (OPTIONAL, "mode_t", "mode"),
    # flags for fchmodat()
    (OPTIONAL, "int", "flags"),
    # it was actually lchmod() or fchmodat(..., AT_SYMLINK_NOFOLLOW), so don't follow symlink
    (OPTIONAL, "bool", "link"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("fchmod", [
    # file fd
    (OPTIONAL, "int", "fd"),
    # mode
    (OPTIONAL, "mode_t", "mode"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("chown", [
    # dir file descriptor for fchownat()
    (OPTIONAL, "int", "dirfd"),
    # file path
    (OPTIONAL, STRING, "path"),
    # uid
    (OPTIONAL, "uid_t", "owner"),
    # gid
    (OPTIONAL, "gid_t", "group"),
    # flags for fchownat()
    (OPTIONAL, "int", "flags"),
    # it was actually lchown() or fchownat(..., AT_SYMLINK_NOFOLLOW), so don't follow symlink
    (OPTIONAL, "bool", "link"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("fchown", [
    # file fd
    (OPTIONAL, "int", "fd"),
    # uid
    (OPTIONAL, "uid_t", "owner"),
    # gid
    (OPTIONAL, "gid_t", "group"),
    # flags for fchownat()
    (OPTIONAL, "int", "flags"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("unlink", [
    # dir file descriptor for unlinkat()
    (OPTIONAL, "int", "dirfd"),
    # path name
    (OPTIONAL, STRING, "pathname"),
    # flags for unlinkat()
    (OPTIONAL, "int", "flags"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("link", [
    # old dir file descriptor for linkat()
    (OPTIONAL, "int", "olddirfd"),
    # old file path
    (OPTIONAL, STRING, "oldpath"),
    # new dir file descriptor for linkat()
    (OPTIONAL, "int", "newdirfd"),
    # new file path
    (OPTIONAL, STRING, "newpath"),
    # flags for linkat()
    (OPTIONAL, "int", "flags"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("symlink", [
    # old file path
    (OPTIONAL, STRING, "oldpath"),
    # new dir file descriptor for symlinkat()
    (OPTIONAL, "int", "newdirfd"),
    # new file path
    (OPTIONAL, STRING, "newpath"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("lockf", [
    # file fd
    (OPTIONAL, "int", "fd"),
    # lock command
    (OPTIONAL, "int", "cmd"),
    # file range
    (OPTIONAL, "off_t", "len"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("utime", [
    # ..at(), like utimensat
    (OPTIONAL, "int", "dirfd"),
    # file name
    (OPTIONAL, STRING, "file"),
    # it was actually lutime() or utimensat(..., AT_SYMLINK_NOFOLLOW), so don't follow symlink
    (OPTIONAL, "bool", "link"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("futime", [
    # file fd
    (OPTIONAL, "int", "fd"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  # pipe2() with flags = 0 is equivalent to pipe()
  ("pipe2", [
    # pipe fd[0] in case of success
    (OPTIONAL, "int", "fd0"),
    # pipe fd[1] in case of success
    (OPTIONAL, "int", "fd1"),
    # flags
    (OPTIONAL, "int", "flags"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  # for dup
  ("dup", [
    # old file fd
    (REQUIRED, "int", "oldfd"),
    # new fd
    (REQUIRED, "int", "ret"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  # for dup2 and dup3
  ("dup3", [
    # old file fd
    (REQUIRED, "int", "oldfd"),
    # new file fd
    (REQUIRED, "int", "newfd"),
    # flags
    (OPTIONAL, "int", "flags"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("dlopen", [
    # file path
    (OPTIONAL, STRING, "filename"),
    # flag, decoding is left for FireBuild supervisor
    (OPTIONAL, "int", "flags"),
    # absolute filename where (if) the library was found
    (OPTIONAL, STRING, "absolute_filename"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("execv", [
    # file to execute
    (OPTIONAL, STRING, "file"),
    # file fd to execute, in case of fexecve()
    (OPTIONAL, "int", "fd"),
    # dir fd to execute, in case of execveat()
    (OPTIONAL, "int", "dirfd"),
    # argv[]
    (OPTIONAL, STRINGARRAY, "arg"),
    # envp[]
    (OPTIONAL, STRINGARRAY, "env"),
    # true, in case of execvp()/execvpe()
    (OPTIONAL, "bool", "with_p"),
    # PATH, or confstr(_CS_PATH) if PATH is not set
    (OPTIONAL, STRING, "path"),
    # user CPU time in microseconds
    (REQUIRED, "int64_t", "utime_u"),
    # system CPU time in microseconds
    (REQUIRED, "int64_t", "stime_u"),
  ]),

  ("execv_failed", [
    # error no., when ret = -1
    (REQUIRED, "int", "error_no"),
  ]),

  # system(3)
  ("system", [
    # command, only SystemRet is sent when command was NULL
    (REQUIRED, STRING, "cmd"),
    # return value is sent in SystemRet
  ]),

  ("system_ret", [
    # command, not present when it was NULL
    (OPTIONAL, STRING, "cmd"),
    # return value
    (REQUIRED, "int", "ret"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  # popen(3)
  ("popen", [
    # command
    (OPTIONAL, STRING, "cmd"),
    # type
    (OPTIONAL, STRING, "type"),
  ]),

  ("popen_parent", [
    # return value
    (REQUIRED, "int", "fd"),
  ]),

  ("popen_failed", [
    # command, to let the supervisor remove it from expected_children
    (OPTIONAL, STRING, "cmd"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("pclose", [
    # file descriptor
    (REQUIRED, "int", "fd"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  # posix_spawn[p](3)
  ("posix_spawn", [
    # command
    (OPTIONAL, STRING, "file"),
    # only argv, sending argc would be redundant
    (OPTIONAL, STRINGARRAY, "arg"),
    # environment variables in unprocessed NAME=value form
    (OPTIONAL, STRINGARRAY, "env"),
    # spawn or spawnp
    (REQUIRED, "bool", "is_spawnp"),
    # posix_spawn_file_actions_t translated into protobuf
    (OPTIONAL, STRINGARRAY, "file_actions"),
  ]),

  ("posix_spawn_parent", [
    # process id
    (REQUIRED, "pid_t", "pid"),
    # child's process id
    (OPTIONAL, "pid_t", "child_pid"),
    # unused
    (OPTIONAL, "int", "error_no"),
  ]),

  ("posix_spawn_failed", [
    # command args, to let the supervisor remove it from expected_children
    (OPTIONAL, STRINGARRAY, "arg"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("wait", [
    # pid whose termination the parent has successfully waited for
    (REQUIRED, "pid_t", "pid"),
  ]),

  ("sysconf", [
    # name
    (OPTIONAL, "int", "name"),
    # value
    (OPTIONAL, "long", "ret"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("syscall", [
    # syscall number (id)
    (OPTIONAL, "long", "number"),
    # return value
    (OPTIONAL, "long", "ret"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("gethostname", [
    # name
    (OPTIONAL, STRING, "name"),
    # value
    (OPTIONAL, "size_t", "len"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("getdomainname", [
    # name
    (OPTIONAL, STRING, "name"),
    # value
    (OPTIONAL, "size_t", "len"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("truncate", [
    # name
    (OPTIONAL, STRING, "path"),
    # length
    (OPTIONAL, "off_t", "len"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("ftruncate", [
    # file fd
    (OPTIONAL, "int", "fd"),
    # length
    (OPTIONAL, "off_t", "len"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("pathconf", [
    # path name
    (OPTIONAL, STRING, "path"),
    # option name
    (OPTIONAL, "int", "name"),
    # option value
    (OPTIONAL, "long", "ret"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("fpathconf", [
    # file fd
    (OPTIONAL, "int", "fd"),
    # option name
    (OPTIONAL, "int", "name"),
    # option value
    (OPTIONAL, "long", "ret"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("read", [
    # file fd
    (REQUIRED, "int", "fd"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("write", [
    # file fd
    (REQUIRED, "int", "fd"),
    # error no., when ret = -1
    (OPTIONAL, "int", "error_no"),
  ]),

  ("exit", [
    # exit status of the process
    (REQUIRED, "int", "exit_status"),
    # user CPU time in microseconds
    (REQUIRED, "int64_t", "utime_u"),
    # system CPU time in microseconds
    (REQUIRED, "int64_t", "stime_u"),
  ]),

  # fork()'s child
  ("fork_child", [
    # process id
    (REQUIRED, "pid_t", "pid"),
    # process parent id
    (REQUIRED, "pid_t", "ppid"),
  ]),

  # process that called fork()
  ("fork_parent", [
    # child process id
    # FIXME - the pid is already known in the supervisor???
    (REQUIRED, "pid_t", "pid"),
  ]),
])
