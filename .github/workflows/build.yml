name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v2
    - name: install-deps
      run: |
        sudo add-apt-repository -y -u ppa:rbalint/valgrind
        sudo apt-get -y install bats cmake doxygen graphviz lcov libconfig++-dev libjs-d3 libprotobuf-dev protobuf-compiler libxxhash-dev moreutils python3-jinja2 valgrind
    - name: build-out-of-tree
      run: |
        mkdir build
        cd build
        cmake ..
        make
    - name: doc
      run: |
        cd build
        doxygen
    - name: build-in-tree
      run: |
        cmake .
        make
    - name: test
      # tests don't run with out of tree builds at the moment
      run: |
        make check
        test/close_fds_exec make valgrind-check
    - name: coverage
      # tests don't run with out of tree builds at the moment
      run: |
        git clean -dxf
        # fake d3.js
        touch data/d3.v5.min.js
        cmake -DCOVERAGE=1 .
        make all check coverage-info
        [ $(echo "$(make coverage-info | grep '^[\.0-9]*$') >= 67.3" | bc) = 1 ]
  scan-build:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v2
    - name: install-deps
      run: |
        sudo cp .github/workflows/llvm-snapshot.gpg.key /etc/apt/trusted.gpg.d/llvm-snapshot.asc
        sudo add-apt-repository -y 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
        sudo apt-get -y install clang-tools-9 cmake libconfig++-dev libprotobuf-dev protobuf-compiler libxxhash-dev python3-jinja2
    - name: scan-build
      run: |
        scan-build-9 cmake .
        scan-build-9 --status-bugs make
  clang-build:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v2
    - name: install-deps
      run: |
        sudo cp .github/workflows/llvm-snapshot.gpg.key /etc/apt/trusted.gpg.d/llvm-snapshot.asc
        sudo add-apt-repository -y 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
        sudo apt-get -y install clang-tools-9 cmake libconfig++-dev libprotobuf-dev protobuf-compiler libxxhash-dev python3-jinja2
    - name: build
      run: |
        env CXX=clang++ CC=clang cmake .
        # the interceptor does not work when building it with Clang, thus make check always fails
        make all
  rebuild-self:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v2
    - name: install-deps
      run: |
        # work around breaking 18.04's make https://github.com/rbalint/fb/issues/174
        sudo apt-get -y install cmake libconfig++-dev libprotobuf-dev protobuf-compiler libxxhash-dev python3-jinja2
        sudo apt-get -y upgrade
    - name: rebuild self
      run: |
        tools/rebuild-self build
        # rebuild again, to test shortcutting
        cd test
        ./run-firebuild make -C ../build clean
        time ./run-firebuild make -C ../build all
        du -sh test_cache_dir
    - name: rebuild self with -j8
      run: |
        cd test
        rm -r test_cache_dir
        ./run-firebuild make -C ../build clean
        time ./run-firebuild make -j8 -C ../build all
        ./run-firebuild make -C ../build clean
        time ./run-firebuild make -j8 -C ../build all
  style-checks:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v2
    - name: install-deps
      run: |
        sudo apt-get -y install cmake libconfig++-dev libjs-d3 libprotobuf-dev protobuf-compiler libxxhash-dev python3-pip
        # TODO(rbalint) use packaged cpplint when it becomes available https://bugs.debian.org/960847
        pip3 install cpplint
    - name: configure
      run: cmake .
    - name: style-check
      run: env PATH=$HOME/.local/bin:$PATH make style-check

