name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    steps:
    - uses: actions/checkout@v2
    - name: install-deps
      run: |
        sudo add-apt-repository -y -u ppa:rbalint/xxhash
        sudo apt-get -y install bats cmake doxygen graphviz lcov libconfig++-dev libjs-d3 libprotobuf-dev protobuf-compiler libxxhash-dev moreutils valgrind
    - name: build-out-of-tree
      run: |
        mkdir build
        cd build
        cmake ..
        make
    - name: doc
      run: |
        cd build
        doxygen
    - name: build-in-tree
      run: |
        cmake .
        make
    - name: rebuild self
      run: |
        cd test
        ./run-firebuild make -C ../build clean
        ./run-firebuild make -C ../build all
    - name: test
      # tests don't run with out of tree builds at the moment
      run: |
        make check
        test/close_fds_exec env FIREBUILD_PREFIX_CMD="valgrind -q --leak-check=full --track-fds=yes" make check
    - name: coverage
      # tests don't run with out of tree builds at the moment
      run: |
        git clean -dxf
        # set up out of tree build for rebuilding self
        mkdir build
        cd build
        cmake ..
        cd ..
        # fake d3.js
        touch data/d3.v5.min.js
        cmake -DCOVERAGE=1 .
        make all check coverage-info
        [ $(echo "$(make coverage-info | grep '^[\.0-9]*$') >= 67.3" | bc) = 1 ]
    - name: rebuild self with coverage
      run: |
        (cd test && ./run-firebuild make -C ../build all)
        make coverage-info
        [ $(echo "$(make coverage-info | grep '^[\.0-9]*$') >= 69.2" | bc) = 1 ]
  scan-build:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    steps:
    - uses: actions/checkout@v2
    - name: install-deps
      run: |
        sudo cp .github/workflows/llvm-snapshot.gpg.key /etc/apt/trusted.gpg.d/llvm-snapshot.asc
        sudo add-apt-repository -y 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
        sudo add-apt-repository -y -u ppa:rbalint/xxhash
        sudo apt-get -y install clang-tools-9 cmake libconfig++-dev libprotobuf-dev protobuf-compiler libxxhash-dev
    - name: scan-build
      run: |
        scan-build-9 cmake .
        scan-build-9 --status-bugs make
